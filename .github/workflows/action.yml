name: Deploy S3 Disaster Recovery Stack

inputs:
  source_bucket:
    required: true
    type: string
  destination_bucket:
    required: true
    type: string
  allow_batch_replication:
    required: true
    type: string
  aws_region:
    required: false
    type: string
    default: "us-west-2"
  env_aws_secret_name:
    required: false
    type: string
    default: ''
  dir:
    required: false
    type: string
    default: "."
  script_path:
    required: false
    type: string
    default: ''
  env_file:
    type: string
    default: ".env"

secrets:
  permissions_boundary:
    required: true
  deployment_account:
    required: true
  deployment_role:
    required: true

runs:
  using: "composite"

  steps:
    - name: Get relevant environment configuration from aws secrets
      if: inputs.env_aws_secret_name != ''
      shell: bash
      working-directory: ${{ inputs.dir }}
      env:
        AWS_DEFAULT_REGION: us-west-2
      run: |
        if [[ -z "${{ inputs.script_path }}" ]]; then
        ./scripts/sync-env.sh ${{ inputs.env_aws_secret_name }}
        else
        python ${{ inputs.script_path }} --secret-id ${{ inputs.env_aws_secret_name }} --env-file ${{ inputs.env_file }}
        fi

    - name: Append runtime env vars to .env
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: |
        echo "SOURCE_BUCKET_NAME=${{ inputs.source_bucket }}" >> .env
        echo "DESTINATION_BUCKET_NAME=${{ inputs.destination_bucket }}" >> .env
        echo "ALLOW_BATCH_REPLICATION=${{ inputs.allow_batch_replication }}" >> .env
        cat .env
        pip install -r requirements.txt
        npm install -g aws-cdk
        cdk synth
        cdk deploy --require-approval never



    # - name: Install dependencies
    #   shell: bash
    #   working-directory: ${{ inputs.dir }}
    #   run: pip install -r requirements.txt

    # - name: Install AWS CDK
    #   shell: bash
    #   working-directory: ${{ inputs.dir }}
    #   run: npm install -g aws-cdk

    # - name: Synthesize CloudFormation templates and Deploy
    #   shell: bash
    #   working-directory: ${{ inputs.dir }}
    #   run: |
    #     set -a
    #     source ${{ inputs.env_file }}
    #     set +a
    #     cdk synth
    #     cdk deploy --require-approval never

